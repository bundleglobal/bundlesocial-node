// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { AppGetHealthResponse, OrganizationGetOrganizationResponse, TeamGetTeamData, TeamGetTeamResponse, TeamUpdateTeamData, TeamUpdateTeamResponse, TeamDeleteTeamData, TeamDeleteTeamResponse, TeamCreateTeamData, TeamCreateTeamResponse, SocialAccountConnectData, SocialAccountConnectResponse, SocialAccountDisconnectData, SocialAccountDisconnectResponse, SocialAccountSetChannelData, SocialAccountSetChannelResponse, SocialAccountRefreshChannelsData, SocialAccountRefreshChannelsResponse, SocialAccountCreatePortalLinkData, SocialAccountCreatePortalLinkResponse, UploadGetListData, UploadGetListResponse, UploadCreateData, UploadCreateResponse, UploadDeleteManyData, UploadDeleteManyResponse, UploadGetData, UploadGetResponse, UploadDeleteData, UploadDeleteResponse, PostGetData, PostGetResponse, PostUpdateData, PostUpdateResponse, PostDeleteData, PostDeleteResponse, PostGetListData, PostGetListResponse, PostCreateData, PostCreateResponse, AnalyticsGetProfileAnalyticsData, AnalyticsGetProfileAnalyticsResponse, AnalyticsGetProfilePostsData, AnalyticsGetProfilePostsResponse, AnalyticsGetProfilePostData, AnalyticsGetProfilePostResponse, AnalyticsTestData, AnalyticsTestResponse, CommentGetData, CommentGetResponse, CommentUpdateData, CommentUpdateResponse, CommentDeleteData, CommentDeleteResponse, CommentGetListData, CommentGetListResponse, CommentCreateData, CommentCreateResponse } from './types.gen';

export class AppService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get health
     * @returns unknown 200
     * @throws ApiError
     */
    public appGetHealth(): CancelablePromise<AppGetHealthResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
}

export class OrganizationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get organization
     * @returns unknown 200
     * @throws ApiError
     */
    public organizationGetOrganization(): CancelablePromise<OrganizationGetOrganizationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/organization/',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
}

export class TeamService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get team
     * @param data The data for the request.
     * @param data.id
     * @returns unknown 200
     * @throws ApiError
     */
    public teamGetTeam(data: TeamGetTeamData): CancelablePromise<TeamGetTeamResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/team/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Update team
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public teamUpdateTeam(data: TeamUpdateTeamData): CancelablePromise<TeamUpdateTeamResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/api/v1/team/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Delete team
     * @param data The data for the request.
     * @param data.id
     * @returns unknown 200
     * @throws ApiError
     */
    public teamDeleteTeam(data: TeamDeleteTeamData): CancelablePromise<TeamDeleteTeamResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v1/team/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Create new team
     * @param data The data for the request.
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public teamCreateTeam(data: TeamCreateTeamData = {}): CancelablePromise<TeamCreateTeamResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/team/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
}

export class SocialAccountService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Connect social account for team
     * Generate OAuth URL for social account connection. Redirect user to this URL to connect social account.
     * @param data The data for the request.
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public socialAccountConnect(data: SocialAccountConnectData = {}): CancelablePromise<SocialAccountConnectResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/social-account/connect',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Disconnect social account from team
     * This will remove the social account from all the scheduled posts too.
     * @param data The data for the request.
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public socialAccountDisconnect(data: SocialAccountDisconnectData = {}): CancelablePromise<SocialAccountDisconnectResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v1/social-account/disconnect',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Set channel for social account
     * Needed only for some social account types - Youtube, Instagram, Facebook and Linkedin.
     * @param data The data for the request.
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public socialAccountSetChannel(data: SocialAccountSetChannelData = {}): CancelablePromise<SocialAccountSetChannelResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/social-account/set-channel',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Refresh channels for social account
     * Refresh channels saved on socialAccount.channels. This is only needed for some social account types - Reddit, Discord, Slack, Pinterest.
     * @param data The data for the request.
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public socialAccountRefreshChannels(data: SocialAccountRefreshChannelsData = {}): CancelablePromise<SocialAccountRefreshChannelsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/social-account/refresh-channels',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Create portal link
     * Simplify connect flow. Create a portal link which can be used to manage connected social accounts directly on bundle.social platform without implementing the logic on your side.
     * @param data The data for the request.
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public socialAccountCreatePortalLink(data: SocialAccountCreatePortalLinkData = {}): CancelablePromise<SocialAccountCreatePortalLinkResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/social-account/create-portal-link',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
}

export class UploadService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get upload list
     * @param data The data for the request.
     * @param data.teamId
     * @returns unknown 200
     * @throws ApiError
     */
    public uploadGetList(data: UploadGetListData): CancelablePromise<UploadGetListResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/upload/',
            query: {
                teamId: data.teamId
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Create upload
     * Upload a file. This is the only endpoint that uses multipart/form-data.
     * @param data The data for the request.
     * @param data.formData Body
     * @returns unknown 200
     * @throws ApiError
     */
    public uploadCreate(data: UploadCreateData = {}): CancelablePromise<UploadCreateResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/upload/',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Delete many uploads
     * @param data The data for the request.
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public uploadDeleteMany(data: UploadDeleteManyData = {}): CancelablePromise<UploadDeleteManyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v1/upload/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Get upload
     * @param data The data for the request.
     * @param data.id
     * @returns unknown 200
     * @throws ApiError
     */
    public uploadGet(data: UploadGetData): CancelablePromise<UploadGetResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/upload/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Delete upload
     * @param data The data for the request.
     * @param data.id
     * @returns unknown 200
     * @throws ApiError
     */
    public uploadDelete(data: UploadDeleteData): CancelablePromise<UploadDeleteResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v1/upload/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
}

export class PostService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get post
     * @param data The data for the request.
     * @param data.id
     * @returns unknown 200
     * @throws ApiError
     */
    public postGet(data: PostGetData): CancelablePromise<PostGetResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/post/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Update post
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public postUpdate(data: PostUpdateData): CancelablePromise<PostUpdateResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/api/v1/post/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Delete post
     * @param data The data for the request.
     * @param data.id
     * @returns unknown 200
     * @throws ApiError
     */
    public postDelete(data: PostDeleteData): CancelablePromise<PostDeleteResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v1/post/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Get post list
     * @param data The data for the request.
     * @param data.teamId
     * @param data.status
     * @param data.orderBy
     * @param data.order
     * @param data.q
     * @param data.platforms
     * @param data.offset
     * @param data.limit
     * @returns unknown 200
     * @throws ApiError
     */
    public postGetList(data: PostGetListData): CancelablePromise<PostGetListResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/post/',
            query: {
                teamId: data.teamId,
                status: data.status,
                orderBy: data.orderBy,
                order: data.order,
                q: data.q,
                platforms: data.platforms,
                offset: data.offset,
                limit: data.limit
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Create post
     * @param data The data for the request.
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public postCreate(data: PostCreateData = {}): CancelablePromise<PostCreateResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/post/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
}

export class AnalyticsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Profile Analytics
     * @param data The data for the request.
     * @param data.teamId
     * @param data.platformType
     * @returns unknown 200
     * @throws ApiError
     */
    public analyticsGetProfileAnalytics(data: AnalyticsGetProfileAnalyticsData): CancelablePromise<AnalyticsGetProfileAnalyticsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/analytics/profile',
            query: {
                teamId: data.teamId,
                platformType: data.platformType
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Get Profile Posts
     * @param data The data for the request.
     * @param data.teamId
     * @param data.platformType
     * @returns unknown 200
     * @throws ApiError
     */
    public analyticsGetProfilePosts(data: AnalyticsGetProfilePostsData): CancelablePromise<AnalyticsGetProfilePostsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/analytics/profile-post',
            query: {
                teamId: data.teamId,
                platformType: data.platformType
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Get Profile Post
     * @param data The data for the request.
     * @param data.id
     * @returns unknown 200
     * @throws ApiError
     */
    public analyticsGetProfilePost(data: AnalyticsGetProfilePostData): CancelablePromise<AnalyticsGetProfilePostResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/analytics/profile-post/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Test Analytics
     * @param data The data for the request.
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public analyticsTest(data: AnalyticsTestData = {}): CancelablePromise<AnalyticsTestResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/analytics/test',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
}

export class CommentService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get comment
     * @param data The data for the request.
     * @param data.id
     * @returns unknown 200
     * @throws ApiError
     */
    public commentGet(data: CommentGetData): CancelablePromise<CommentGetResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/comment/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Update comment
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public commentUpdate(data: CommentUpdateData): CancelablePromise<CommentUpdateResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/api/v1/comment/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Delete comment
     * @param data The data for the request.
     * @param data.id
     * @returns unknown 200
     * @throws ApiError
     */
    public commentDelete(data: CommentDeleteData): CancelablePromise<CommentDeleteResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v1/comment/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Get comment list
     * @param data The data for the request.
     * @param data.teamId
     * @param data.status
     * @param data.orderBy
     * @param data.order
     * @param data.q
     * @param data.platforms
     * @param data.offset
     * @param data.limit
     * @returns unknown 200
     * @throws ApiError
     */
    public commentGetList(data: CommentGetListData): CancelablePromise<CommentGetListResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/comment/',
            query: {
                teamId: data.teamId,
                status: data.status,
                orderBy: data.orderBy,
                order: data.order,
                q: data.q,
                platforms: data.platforms,
                offset: data.offset,
                limit: data.limit
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
    /**
     * Create comment
     * @param data The data for the request.
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public commentCreate(data: CommentCreateData = {}): CancelablePromise<CommentCreateResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/comment/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                429: '429',
                500: '500',
            }
        });
    }
    
}