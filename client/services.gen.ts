// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { AppGetHealthResponse, TeamGetTeamResponse, UploadCreateData, UploadCreateResponse, UploadGetListResponse, UploadDeleteManyData, UploadDeleteManyResponse, UploadGetData, UploadGetResponse, UploadDeleteData, UploadDeleteResponse, PostCreateData, PostCreateResponse, PostGetListData, PostGetListResponse, PostGetData, PostGetResponse, PostUpdateData, PostUpdateResponse, PostDeleteData, PostDeleteResponse } from './types.gen';

export class AppService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get health
     * @returns unknown 200
     * @throws ApiError
     */
    public appGetHealth(): CancelablePromise<AppGetHealthResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                500: '500',
            }
        });
    }
    
}

export class TeamService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get team
     * @returns unknown 200
     * @throws ApiError
     */
    public teamGetTeam(): CancelablePromise<TeamGetTeamResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/team/',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                500: '500',
            }
        });
    }
    
}

export class UploadService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Create upload
     * Upload a file. This is the only endpoint that uses multipart/form-data.
     * @param data The data for the request.
     * @param data.formData Body
     * @returns unknown 200
     * @throws ApiError
     */
    public uploadCreate(data: UploadCreateData = {}): CancelablePromise<UploadCreateResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/upload/',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                500: '500',
            }
        });
    }
    
    /**
     * Get upload list
     * @returns unknown 200
     * @throws ApiError
     */
    public uploadGetList(): CancelablePromise<UploadGetListResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/upload/',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                500: '500',
            }
        });
    }
    
    /**
     * Delete many uploads
     * @param data The data for the request.
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public uploadDeleteMany(data: UploadDeleteManyData = {}): CancelablePromise<UploadDeleteManyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v1/upload/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                500: '500',
            }
        });
    }
    
    /**
     * Get upload
     * @param data The data for the request.
     * @param data.id
     * @returns unknown 200
     * @throws ApiError
     */
    public uploadGet(data: UploadGetData): CancelablePromise<UploadGetResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/upload/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                500: '500',
            }
        });
    }
    
    /**
     * Delete upload
     * @param data The data for the request.
     * @param data.id
     * @returns unknown 200
     * @throws ApiError
     */
    public uploadDelete(data: UploadDeleteData): CancelablePromise<UploadDeleteResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v1/upload/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                500: '500',
            }
        });
    }
    
}

export class PostService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Create post
     * @param data The data for the request.
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public postCreate(data: PostCreateData = {}): CancelablePromise<PostCreateResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/post/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                500: '500',
            }
        });
    }
    
    /**
     * Get post list
     * @param data The data for the request.
     * @param data.status
     * @param data.orderBy
     * @param data.order
     * @param data.q
     * @param data.platforms
     * @param data.offset
     * @param data.limit
     * @returns unknown 200
     * @throws ApiError
     */
    public postGetList(data: PostGetListData = {}): CancelablePromise<PostGetListResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/post/',
            query: {
                status: data.status,
                orderBy: data.orderBy,
                order: data.order,
                q: data.q,
                platforms: data.platforms,
                offset: data.offset,
                limit: data.limit
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                500: '500',
            }
        });
    }
    
    /**
     * Get post
     * @param data The data for the request.
     * @param data.id
     * @returns unknown 200
     * @throws ApiError
     */
    public postGet(data: PostGetData): CancelablePromise<PostGetResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/post/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                500: '500',
            }
        });
    }
    
    /**
     * Update post
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody Body
     * @returns unknown 200
     * @throws ApiError
     */
    public postUpdate(data: PostUpdateData): CancelablePromise<PostUpdateResponse> {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/api/v1/post/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                500: '500',
            }
        });
    }
    
    /**
     * Delete post
     * @param data The data for the request.
     * @param data.id
     * @returns unknown 200
     * @throws ApiError
     */
    public postDelete(data: PostDeleteData): CancelablePromise<PostDeleteResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v1/post/{id}',
            path: {
                id: data.id
            },
            errors: {
                400: '400',
                401: '401',
                403: '403',
                404: '404',
                500: '500',
            }
        });
    }
    
}